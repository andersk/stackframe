{"version":3,"sources":["stackframe.js"],"names":["root","factory","define","amd","exports","module","StackFrame","this","_isNumber","n","isNaN","parseFloat","isFinite","_capitalize","str","charAt","toUpperCase","substring","_getter","p","booleanProps","numericProps","stringProps","props","concat","obj","Object","i","length","hasOwnProperty","undefined","prototype","getArgs","args","setArgs","v","toString","call","TypeError","getEvalOrigin","evalOrigin","setEvalOrigin","getFunctionName","join","getFileName","getLineNumber","getColumnNumber","fromString","argsStartIndex","indexOf","argsEndIndex","lastIndexOf","functionName","split","locationString","parts","exec","fileName","lineNumber","columnNumber","Boolean","j","Number","k","String"],"mappings":"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","file":"stackframe.min.js","sourcesContent":["(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function() {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function() {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n\n    var props = booleanProps.concat(numericProps, stringProps, arrayProps);\n\n    function StackFrame(obj) {\n        if (obj instanceof Object) {\n            for (var i = 0; i < props.length; i++) {\n                if (obj.hasOwnProperty(props[i]) && obj[props[i]] !== undefined) {\n                    this['set' + _capitalize(props[i])](obj[props[i]]);\n                }\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function() {\n            return this.args;\n        },\n        setArgs: function(v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function() {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function(v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function() {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    StackFrame.fromString = function StackFrame$$fromString(str) {\n        var argsStartIndex = str.indexOf('(');\n        var argsEndIndex = str.lastIndexOf(')');\n\n        var functionName = str.substring(0, argsStartIndex);\n        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');\n        var locationString = str.substring(argsEndIndex + 1);\n\n        if (locationString.indexOf('@') === 0) {\n            var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');\n            var fileName = parts[1];\n            var lineNumber = parts[2];\n            var columnNumber = parts[3];\n        }\n\n        return new StackFrame({\n            functionName: functionName,\n            args: args || undefined,\n            fileName: fileName,\n            lineNumber: lineNumber || undefined,\n            columnNumber: columnNumber || undefined\n        });\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function(p) {\n            return function(v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function(p) {\n            return function(v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function(p) {\n            return function(v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n"]}